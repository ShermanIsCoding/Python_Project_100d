import re
'''
Python使用了自动化内存管理，这种管理机制以引用计数为基础，同时也引入了标记-清除
和分代收集两种机制为辅的策略。

导致引用计数+1的情况：
 1.对象被创建，例如 a = 23
 2.对象被引用，例如 b = a 
 3.对象被作为参数 传入到一个函数中 例如f(a)
 4.对象作为一个元素 存储在容器中 例如list1 = [a,]
 
 引用计数可能会导致循环引用的问题 而循环引用会导致内存泄漏，如下面的代码所示。为解决
 这个问题 Python中引入'标记-清楚'和'分代收集'。在创建一个对象的时候，对象被放在第一代
 中，如果在第一代的垃圾检查中对象存活了下来，该对象就会被放到第二代中 同理在第二代的垃圾
 检查中对象存活下来 该对象就会被放到第三代中...
'''
# 循环引用会导致内存泄漏
list1 = []
list2 = []
list1.append(list2)
list2.append(list1)

'''
以下情况会导致垃圾回收：
1.调用gc.collect()
2.gc模块的计数器达到阔值
3.程序退出
'''














